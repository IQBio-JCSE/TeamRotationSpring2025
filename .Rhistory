reproduction_rate = NA,
resistance = NA,
size = 1,
group = "Wild Population"
)
# Ensure trait value within [0, 1] for wild population
wild_population[trait < 0, trait := 0]
wild_population[trait > 1, trait := 1]
# Create domesticated population
domesticated_population <- data.table(
trait = rnorm(num_domesticated_population, mean = 0.4, sd = 0.02),  # Narrow Gaussian distribution
growth_rate = NA,
reproduction_rate = NA,
resistance = NA,
size = 1,
group = "Domesticated Population"
)
# Ensure trait value within [0, 1] for domesticated population
domesticated_population[trait < 0, trait := 0]
domesticated_population[trait > 1, trait := 1]
# Combine populations
population <- rbind(wild_population, domesticated_population)
# Initialize plant properties
population[, growth_rate := 1 - trait]
population[, reproduction_rate := 1 - trait]
population[, resistance := trait]
return(population)
}
# Run simulation for single instance to test
result_plot <- simulate(time_steps = 100, pest_pressure = 0.2)
result_plot
# Reproduce function
reproduce <- function(population) {
# Calculate number of offspring for each individual plant
reproduction_prob <- population$reproduction_rate * 0.2
num_offspring <- floor(reproduction_prob) # Ensure integer
# Create new plants based on reproduction probability
new_plants <- population[rep(1:.N, num_offspring)]
if (nrow(new_plants) > 0) {
new_plants[, size := 1]
new_plants[, growth_rate := 1 - trait]
new_plants[, reproduction_rate := 1 - trait]
new_plants[, resistance := trait]
population <- rbind(population, new_plants)
}
return(population)
}
# Run simulation for single instance to test
result_plot <- simulate(time_steps = 100, pest_pressure = 0.2)
result_plot
#' Check and install required packages
install_required_packages <- function() {
# Check and install devtools if not present
if (!requireNamespace("devtools", quietly = TRUE)) {
message("Installing devtools package...")
install.packages("devtools")
}
# Check and install rvle if not present
if (!requireNamespace("rvle", quietly = TRUE)) {
message("Installing rvle package...")
devtools::install_github("picasa/rvle")
}
# Check and install rsunflo if not present
if (!requireNamespace("rsunflo", quietly = TRUE)) {
message("Installing rsunflo package...")
devtools::install_github("picasa/rsunflo")
}
# Load required packages
library(rvle)
library(rsunflo)
library(tidyverse)
# Verify VLE installation
if (!"Rvle" %in% class(rvle::get_vle())) {
stop("VLE simulation platform not installed. Please install from VLE project website.")
}
message("All required packages installed and loaded successfully.")
}
#' Check for SUNFLO model file
check_sunflo_model <- function() {
if (!file.exists("sunflo_web.vpz")) {
stop("SUNFLO model file 'sunflo_web.vpz' not found. Please download from RECORD project.")
}
message("SUNFLO model file found.")
}
#' Initialize SUNFLO model
#' @param model_path Path to the SUNFLO model file
#' @return Rvle object
initialize_sunflo <- function(model_path = "sunflo_web.vpz") {
tryCatch({
sunflo <- new("Rvle", file = model_path, pkg = "sunflo")
message("SUNFLO model initialized successfully.")
return(sunflo)
}, error = function(e) {
stop("Failed to initialize SUNFLO model: ", e$message)
})
}
#' Run single simulation
#' @param design Design of experiments
#' @param unit_id Unit ID to simulate
#' @return Simulation results
run_single_simulation <- function(design, unit_id) {
tryCatch({
results <- design %>%
play(unit = unit_id) %>%
shape(view = "timed")
return(results)
}, error = function(e) {
warning("Simulation failed for unit ", unit_id, ": ", e$message)
return(NULL)
})
}
#' Run multiple simulations in parallel
#' @param design Design of experiments
#' @param n_cores Number of CPU cores to use (default: 4)
#' @return Data frame with simulation results
run_parallel_simulations <- function(design, n_cores = 4) {
if (!requireNamespace("doMC", quietly = TRUE)) {
install.packages("doMC")
}
library(doMC)
registerDoMC(cores = n_cores)
list_simulation <- design %>% select(id)
output <- list_simulation %>%
plyr::mdply(possibly(run_single_simulation, NULL), design = design) %>%
as_tibble()
return(output)
}
#' Calculate crop performance indicators
#' @param simulation_results Simulation results data frame
#' @return Data frame with performance indicators
calculate_indicators <- function(simulation_results) {
output_indicators <- simulation_results %>%
group_by(id) %>%
do(indicate(.)) %>%
ungroup()
return(output_indicators)
}
#' Plot simulation results
#' @param results Simulation results
#' @param indicator Indicator to plot
plot_results <- function(results, indicator) {
ggplot(results, aes(x = id, y = !!sym(indicator))) +
geom_point() +
geom_line() +
theme_minimal() +
labs(title = paste("SUNFLO Simulation Results -", indicator),
x = "Simulation ID",
y = indicator)
}
main <- function() {
# Install and check requirements
install_required_packages()
check_sunflo_model()
# Load design of experiments
design <- readRDS("inst/doc/files/design.rds")
# Initialize model
sunflo <- initialize_sunflo()
# Run default simulation
default_results <- sunflo %>%
run() %>%
results() %>%
shape(view = "timed")
# Display default results
display(default_results)
# Run parallel simulations
simulation_results <- run_parallel_simulations(design)
# Calculate indicators
performance_indicators <- calculate_indicators(simulation_results)
# Plot results (example with yield indicator)
if ("yield" %in% names(performance_indicators)) {
p <- plot_results(performance_indicators, "yield")
print(p)
}
return(list(
default_results = default_results,
simulation_results = simulation_results,
performance_indicators = performance_indicators
))
}
# Execute main function if script is run directly
if (!interactive()) {
results <- main()
}
interactive
# Execute main function if script is run directly
if (!interactive()) {
results <- main()
}
library(rvle)
library(rsunflo)
# packages
library(tidyverse)
library(rvle)
library(rsunflo)
library("devtools")
devtools::install_github("picasa/rsunflo")
library(rsunflo)
# load design of experiments
design <- readRDS("inst/doc/files/design.rds")
?readRDS
# load the sunflo model
sunflo <- new("Rvle", file = "sunflo_web.vpz", pkg = "sunflo")
library(rvle)
devtools::install_github("picasa/rsunflo")
library(rvle)
.onLoad <- function(lib, pkg)
{
library.dynam("rvle", pkg, lib)
x = .Call("__rvleC_onload", PACKAGE="rvle")
}
rvle.open <- function(file, pkg = "")
{
stopifnot(is.character(file))
stopifnot(is.character(pkg))
if (pkg == "")
x <- .Call("rvleC_open", file, PACKAGE="rvle")
else
x <- .Call("rvleC_open_pkg", file, pkg, PACKAGE="rvle")
stopifnot(!is.null(x))
class(x) <- 'rvle'
return(x)
}
is.rvle <- function(object)
{
inherits(object, "rvle")
}
rvle.packages_list <- function()
{
x <- .Call("rvleC_packages_list", PACKAGE="rvle")
return(x)
}
rvle.package_content <- function(pkgname)
{
stopifnot(is.character(pkgname))
x <- .Call("rvleC_package_content", pkgname, PACKAGE="rvle")
return(x)
}
rvle.save <- function(vleObj, filename)
{
stopifnot(is.rvle(vleObj))
stopifnot(is.character(filename))
.Call("rvleC_save", vleObj, filename, PACKAGE="rvle")
return (invisible(NULL))
}
rvle.get_log_level <- function(vleObj)
{
stopifnot(is.rvle(vleObj))
x = .Call("rvleC_get_log_level", vleObj, PACKAGE="rvle")
return (x)
}
rvle.set_log_level <- function(vleObj, level)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_set_log_level", vleObj, as.integer(level), PACKAGE="rvle")
return (invisible(NULL))
}
rvle.get_atomic_models = function(vleObj)
{
stopifnot(is.rvle(vleObj))
x = .Call("rvleC_get_atomic_models", vleObj, PACKAGE="rvle")
return(x)
}
rvle.get_conditions = function(vleObj)
{
stopifnot(is.rvle(vleObj))
x = .Call("rvleC_get_conditions", vleObj, PACKAGE="rvle")
return(x)
}
rvle.add_condition = function(vleObj, condition)
{
stopifnot(is.rvle(vleObj))
stopifnot(is.character(condition))
.Call("rvleC_add_condition", vleObj, condition, PACKAGE="rvle")
return (invisible(NULL))
}
rvle.del_condition = function(vleObj, condition)
{
stopifnot(is.rvle(vleObj))
stopifnot(is.character(condition))
.Call("rvleC_add_condition", vleObj, condition, PACKAGE="rvle")
return (invisible(NULL))
}
rvle.get_attached_conditions = function(vleObj, atomicpath)
{
stopifnot(is.rvle(vleObj))
stopifnot(is.character(atomicpath))
x = .Call("rvleC_get_attached_conditions", vleObj, atomicpath,
PACKAGE="rvle")
return(x)
}
rvle.attach_condition = function(vleObj, atomicpath, condition)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_attach_condition", vleObj, atomicpath, condition,
PACKAGE="rvle")
return (invisible(NULL))
}
rvle.detach_condition = function(vleObj, atomicpath, condition)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_detach_condition", vleObj, atomicpath, condition,
PACKAGE="rvle")
return (invisible(NULL))
}
rvle.get_condition_ports = function(vleObj, condition)
{
stopifnot(is.rvle(vleObj))
x = .Call("rvleC_get_condition_ports", vleObj, condition,
PACKAGE="rvle")
return(x)
}
rvle.add_condition_port = function(vleObj, condition, port)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_add_condition_port", vleObj, condition, port,
PACKAGE="rvle")
return (invisible(NULL))
}
rvle.del_condition_port = function(vleObj, condition, port)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_del_condition_port", vleObj, condition, port,
PACKAGE="rvle")
return (invisible(NULL))
}
rvle.get_condition_port_value = function(vleObj, condition, port)
{
stopifnot(is.rvle(vleObj))
x = .Call("rvleC_get_condition_port_value", vleObj, condition, port,
PACKAGE="rvle")
return(x)
}
rvle.set_condition_port_value = function(vleObj, condition, port, val)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_set_condition_port_value", vleObj, as.character(condition),
as.character(port), val, PACKAGE="rvle")
return (invisible(NULL))
}
rvle.get_observables = function(vleObj)
{
stopifnot(is.rvle(vleObj))
x = .Call("rvleC_get_observables", vleObj, PACKAGE="rvle")
return(x)
}
rvle.get_observable_ports = function(vleObj, observable)
{
stopifnot(is.rvle(vleObj))
x = .Call("rvleC_get_observable_ports", vleObj, observable, PACKAGE="rvle")
return(x)
}
rvle.add_observable_port = function(vleObj, observable, port)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_add_observable_port", vleObj, observable, port, PACKAGE="rvle")
return (invisible(NULL))
}
rvle.del_observable_port = function(vleObj, observable, port)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_del_observable_port", vleObj, observable, port, PACKAGE="rvle")
return (invisible(NULL))
}
rvle.attach_view = function(vleObj, view, observable, port)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_attach_view", vleObj, view, observable, port, PACKAGE="rvle")
return (invisible(NULL))
}
rvle.detach_view = function(vleObj, view, observable, port)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_detach_view", vleObj, view, observable, port, PACKAGE="rvle")
return (invisible(NULL))
}
rvle.get_attached_views = function(vleObj, observable, port)
{
stopifnot(is.rvle(vleObj))
x = .Call("rvleC_get_attached_views", vleObj, observable, port,
PACKAGE="rvle")
return(x)
}
rvle.get_views = function(vleObj)
{
stopifnot(is.rvle(vleObj))
x = .Call("rvleC_get_views", vleObj, PACKAGE="rvle")
return(x)
}
rvle.add_view = function(vleObj, view)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_add_view", vleObj, view, PACKAGE="rvle")
return (invisible(NULL))
}
rvle.del_view = function(vleObj, view)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_del_view", vleObj, view, PACKAGE="rvle")
return (invisible(NULL))
}
rvle.get_view_config = function(vleObj, view)
{
stopifnot(is.rvle(vleObj))
x = .Call("rvleC_get_view_config", vleObj, view, PACKAGE="rvle")
return(x)
}
rvle.set_view_config = function(vleObj, view, config)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_set_view_config", vleObj, view, config, PACKAGE="rvle")
return (invisible(NULL))
}
rvle.get_view_plugin = function(vleObj, view)
{
stopifnot(is.rvle(vleObj))
x = .Call("rvleC_get_view_plugin", vleObj, view, PACKAGE="rvle")
return(x)
}
rvle.set_view_plugin = function(vleObj, view, pluginname,
package="vle.output")
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_set_view_plugin", vleObj, view, pluginname, package,
PACKAGE="rvle")
return (invisible(NULL))
}
rvle.available_outputs = function(vleObj)
{
stopifnot(is.rvle(vleObj))
x = .Call("rvleC_available_outputs", vleObj, PACKAGE="rvle")
return(x)
}
rvle.run = function(vleObj)
{
stopifnot(is.rvle(vleObj))
x = .Call("rvleC_run", vleObj, PACKAGE="rvle")
return(x)
}
rvle.manager_clear = function(vleObj)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_manager_clear", vleObj, PACKAGE="rvle")
return (invisible(NULL))
}
rvle.manager_get_config = function(vleObj)
{
stopifnot(is.rvle(vleObj))
x = .Call("rvleC_manager_get_config", vleObj, PACKAGE="rvle")
return(x)
}
rvle.manager_set_config = function(vleObj, parallel_option="single",
nb_slots=1, simulation_spawn=T,
rm_MPI_files=T, generate_MPI_host=F,
working_dir="/tmp/")
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_manager_set_config", vleObj, as.character(parallel_option),
as.integer(nb_slots), as.logical(simulation_spawn),
as.logical(rm_MPI_files), as.logical(generate_MPI_host),
as.character(working_dir), PACKAGE="rvle")
return (invisible(NULL))
}
rvle.plan_clear = function(vleObj)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_plan_clear", vleObj, PACKAGE="rvle")
return (invisible(NULL))
}
rvle.plan_get = function(vleObj)
{
stopifnot(is.rvle(vleObj))
x = .Call("rvleC_plan_get", vleObj, PACKAGE="rvle")
return(x)
}
rvle.plan_define = function(vleObj, cond, port, addORremove)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_plan_define", vleObj, cond, port, as.logical(addORremove),
PACKAGE="rvle")
return (invisible(NULL))
}
rvle.plan_input = function(vleObj, cond, port, val)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_plan_input", vleObj, cond, port, val,
PACKAGE="rvle")
return (invisible(NULL))
}
rvle.plan_propagate = function(vleObj, cond, port, val)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_plan_propagate", vleObj, cond, port, val, PACKAGE="rvle")
return (invisible(NULL))
}
rvle.plan_replicate = function(vleObj, cond, port, val)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_plan_replicate", vleObj, cond, port, val, PACKAGE="rvle")
return (invisible(NULL))
}
rvle.plan_output = function(vleObj, id, path,
integration="all", aggregation_replicate="mean",
aggregation_input="all", obs_times=NULL,
obs_values=NULL, replicate_quantile=0.5)
{
stopifnot(is.rvle(vleObj))
.Call("rvleC_plan_output", vleObj, as.character(id), as.character(path),
as.character(integration), as.character(aggregation_replicate),
as.character(aggregation_input), as.numeric(obs_times),
as.numeric(obs_values), as.numeric(replicate_quantile), PACKAGE="rvle")
return (invisible(NULL))
}
