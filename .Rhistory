}
plot_population <- function(population, time_step, results) {
wild_population_count <- nrow(population[group == "Wild Population"])
domesticated_population_count <- nrow(population[group == "Domesticated Population"])
wild_avg_trait <- mean(population[group == "Wild Population", trait])
domesticated_avg_trait <- mean(population[group == "Domesticated Population", trait])
wild_trait_variance <- var(population[group == "Wild Population", trait])
domesticated_trait_variance <- var(population[group == "Domesticated Population", trait])
# Calculate bounds for variance
wild_upper_bound <- wild_avg_trait + sqrt(wild_trait_variance)
wild_lower_bound <- wild_avg_trait - sqrt(wild_trait_variance)
domesticated_upper_bound <- domesticated_avg_trait + sqrt(domesticated_trait_variance)
domesticated_lower_bound <- domesticated_avg_trait - sqrt(domesticated_trait_variance)
# Append results to the tracking data.table
results <- rbind(results, data.table(
time = time_step,
group = "Wild Population",
count = wild_population_count,
avg_trait = wild_avg_trait,
trait_variance = wild_trait_variance,
upper_bound = wild_upper_bound,
lower_bound = wild_lower_bound
))
results <- rbind(results, data.table(
time = time_step,
group = "Domesticated Population",
count = domesticated_population_count,
avg_trait = domesticated_avg_trait,
trait_variance = domesticated_trait_variance,
upper_bound = domesticated_upper_bound,
lower_bound = domesticated_lower_bound
))
return(results)
}
simulate <- function(time_steps, pest_pressure) {
population <- initialize_population()
results <- data.table(
time = integer(),
group = character(),
count = integer(),
avg_trait = numeric(),
trait_variance = numeric(),
upper_bound = numeric(),
lower_bound = numeric()
)
for (t in 1:time_steps) {
pest_pressure <- pest_pressure + sin(t/10) * 0.2  # Oscillates around base value
pest_pressure <- min(max(pest_pressure, 0), 1)  # Clamp between 0 and 1
population <- grow(population, pest_pressure)
population <- reproduce(population)
population <- suffer_mortality(population, pest_pressure)
results <- plot_population(population, t, results)
}
ggplot(results, aes(x = time)) +
# Population size
geom_line(aes(y = count, color = group), linewidth = 1) +
# Average trait (scaled to align with population size)
geom_line(aes(y = avg_trait * max(results$count) / max(results$avg_trait),
color = group, linetype = group)) +
# Bounding region for variance (scaled to align with population size)
geom_ribbon(aes(ymin = lower_bound * max(results$count) / max(results$avg_trait),
ymax = upper_bound * max(results$count) / max(results$avg_trait),
fill = group), alpha = 0.1) +
scale_y_continuous(
name = "Population Size",
sec.axis = sec_axis(~ . * max(results$avg_trait) / max(results$count),
name = "Secondary Metabolite Expression (0-1)")
) +
scale_color_manual(
values = c("Wild Population" = "#27582b", "Domesticated Population" = "#59466a")  # Green and Purple
) +
scale_fill_manual(
values = c("Wild Population" = "#27582b", "Domesticated Population" = "#59466a")  # Green and Purple
) +
scale_linetype_manual(
values = c("Wild Population" = "dashed", "Domesticated Population" = "dashed")
) +
guides(
color = guide_legend(order = 1, title = "Population Size"),
fill = guide_legend(order = 2, title = "Trait Expression"),
linetype = guide_legend(order = 2, title = "Trait Expression")
) +
labs(
title = sprintf("Time Steps: %d, Pest Pressure: %.2f", time_steps, pest_pressure),
x = "Time Steps",
color = "Group",
fill = "Group",
linetype = "Group"
) +
theme_minimal()
}
# Run simulation for single instance to test
result_plot <- simulate(time_steps = 100, pest_pressure = 0.8)
result_plot
result_plot$data
Initialize parameters
num_wild_population <- 1000
num_domesticated_population <- 1000
time_steps <- 0
# Initialize plant population
initialize_population <- function() {
# Create wild population
wild_population <- data.table(
trait = rnorm(num_wild_population, mean = 0.6, sd = 0.3),  # Gaussian distribution
growth_rate = NA,
reproduction_rate = NA,
resistance = NA,
size = 1,
group = "Wild Population"
)
# Ensure trait value within [0, 1] for wild population
wild_population[trait < 0, trait := 0]
wild_population[trait > 1, trait := 1]
# Create domesticated population
domesticated_population <- data.table(
trait = rnorm(num_domesticated_population, mean = 0.4, sd = 0.02),  # Narrow Gaussian distribution
growth_rate = NA,
reproduction_rate = NA,
resistance = NA,
size = 1,
group = "Domesticated Population"
)
# Ensure trait value within [0, 1] for domesticated population
domesticated_population[trait < 0, trait := 0]
domesticated_population[trait > 1, trait := 1]
# Combine populations
population <- rbind(wild_population, domesticated_population)
# Initialize plant properties
population[, growth_rate := 1 - trait]
population[, reproduction_rate := 1 - trait]
population[, resistance := trait]
return(population)
}
# # Grow function
# grow <- function(population) {
#   population[, size := size + growth_rate * 0.1]
#   return(population)
# }
# Updated grow function based on trait and pest pressure
grow <- function(population, pest_pressure) {
population[, growth_rate := fifelse(trait >= 0.5 & pest_pressure >= 0.5, 0.05,
fifelse(trait < 0.5 & pest_pressure < 0.5, 0.05,
0.1))]
population[, size := size + growth_rate]
return(population)
}
# # mortality function
# suffer_mortality <- function(population, pest_pressure) {
#   mortality_prob <- pest_pressure * (1 - population$resistance) * 0.1
#   survivors <- population[runif(.N) >= mortality_prob]
#   return(survivors)
# }
# Updated mortality function based on trait and pest pressure
suffer_mortality <- function(population, pest_pressure) {
population[, mortality_prob := fifelse(trait >= 0.5 & pest_pressure >= 0.5, 0.01,
fifelse(trait < 0.5 & pest_pressure >= 0.5, 0.2,
fifelse(trait >= 0.5 & pest_pressure < 0.5, 0.01,
0.15)))]
survivors <- population[runif(.N) >= mortality_prob]
return(survivors)
}
# Reproduce function
reproduce <- function(population) {
# Calculate number of offspring for each individual plant
reproduction_prob <- population$reproduction_rate * 0.8
num_offspring <- floor(reproduction_prob) # Ensure integer
# Create new plants based on reproduction probability
new_plants <- population[rep(1:.N, num_offspring)]
if (nrow(new_plants) > 0) {
new_plants[, size := 1]
new_plants[, growth_rate := 1 - trait]
new_plants[, reproduction_rate := 1 - trait]
new_plants[, resistance := trait]
population <- rbind(population, new_plants)
}
return(population)
}
plot_population <- function(population, time_step, results) {
wild_population_count <- nrow(population[group == "Wild Population"])
domesticated_population_count <- nrow(population[group == "Domesticated Population"])
wild_avg_trait <- mean(population[group == "Wild Population", trait])
domesticated_avg_trait <- mean(population[group == "Domesticated Population", trait])
wild_trait_variance <- var(population[group == "Wild Population", trait])
domesticated_trait_variance <- var(population[group == "Domesticated Population", trait])
# Calculate bounds for variance
wild_upper_bound <- wild_avg_trait + sqrt(wild_trait_variance)
wild_lower_bound <- wild_avg_trait - sqrt(wild_trait_variance)
domesticated_upper_bound <- domesticated_avg_trait + sqrt(domesticated_trait_variance)
domesticated_lower_bound <- domesticated_avg_trait - sqrt(domesticated_trait_variance)
# Append results to the tracking data.table
results <- rbind(results, data.table(
time = time_step,
group = "Wild Population",
count = wild_population_count,
avg_trait = wild_avg_trait,
trait_variance = wild_trait_variance,
upper_bound = wild_upper_bound,
lower_bound = wild_lower_bound
))
results <- rbind(results, data.table(
time = time_step,
group = "Domesticated Population",
count = domesticated_population_count,
avg_trait = domesticated_avg_trait,
trait_variance = domesticated_trait_variance,
upper_bound = domesticated_upper_bound,
lower_bound = domesticated_lower_bound
))
return(results)
}
# simulate <- function(time_steps, pest_pressure) {
#   population <- initialize_population()
#   results <- data.table()
#   for (t in 1:time_steps) {
#     pest_pressure <- pest_pressure + sin(t/10) * 0.2  # Oscillates around base value
#     pest_pressure <- min(max(pest_pressure, 0), 1)  # Clamp between 0 and 1
#     population <- grow(population, pest_pressure)
#     population <- reproduce(population)
#     population <- suffer_mortality(population, pest_pressure)
#     results <- plot_population(population, t, results)
#   }
#   # [ ... plotting code unchanged ... ]
# }
simulate <- function(time_steps, pest_pressure) {
population <- initialize_population()
results <- data.table(
time = integer(),
group = character(),
count = integer(),
avg_trait = numeric(),
trait_variance = numeric(),
upper_bound = numeric(),
lower_bound = numeric()
)
for (t in 1:time_steps) {
pest_pressure <- pest_pressure + sin(t/10) * 0.2  # Oscillates around base value
pest_pressure <- min(max(pest_pressure, 0), 1)  # Clamp between 0 and 1
population <- grow(population, pest_pressure)
population <- reproduce(population)
population <- suffer_mortality(population, pest_pressure)
results <- plot_population(population, t, results)
}
ggplot(results, aes(x = time)) +
# Population size
geom_line(aes(y = count, color = group), linewidth = 1) +
# Average trait (scaled to align with population size)
geom_line(aes(y = avg_trait * max(results$count) / max(results$avg_trait),
color = group, linetype = group)) +
# Bounding region for variance (scaled to align with population size)
geom_ribbon(aes(ymin = lower_bound * max(results$count) / max(results$avg_trait),
ymax = upper_bound * max(results$count) / max(results$avg_trait),
fill = group), alpha = 0.1) +
scale_y_continuous(
name = "Population Size",
sec.axis = sec_axis(~ . * max(results$avg_trait) / max(results$count),
name = "Secondary Metabolite Expression (0-1)")
) +
scale_color_manual(
values = c("Wild Population" = "#27582b", "Domesticated Population" = "#59466a")  # Green and Purple
) +
scale_fill_manual(
values = c("Wild Population" = "#27582b", "Domesticated Population" = "#59466a")  # Green and Purple
) +
scale_linetype_manual(
values = c("Wild Population" = "dashed", "Domesticated Population" = "dashed")
) +
guides(
color = guide_legend(order = 1, title = "Population Size"),
fill = guide_legend(order = 2, title = "Trait Expression"),
linetype = guide_legend(order = 2, title = "Trait Expression")
) +
labs(
title = sprintf("Time Steps: %d, Pest Pressure: %.2f", time_steps, pest_pressure),
x = "Time Steps",
color = "Group",
fill = "Group",
linetype = "Group"
) +
theme_minimal()
}
# TODO add evoltution
# reproduce <- function(population) {
#   reproduction_prob <- population$reproduction_rate * 0.05
#   num_offspring <- floor(reproduction_prob)
#   new_plants <- population[rep(1:.N, num_offspring)]
#
#   if (nrow(new_plants) > 0) {
#     new_plants[, trait := pmin(pmax(trait + rnorm(.N, 0, 0.01), 0), 1)]  # Mutation
#     new_plants[, size := 1]
#     new_plants[, growth_rate := 1 - trait]
#     new_plants[, reproduction_rate := 1 - trait]
#     new_plants[, resistance := trait]
#     population <- rbind(population, new_plants)
#   }
#
#   return(population)
# }
# Run simulation for single instance to test
result_plot <- simulate(time_steps = 100, pest_pressure = 0.8)
result_plot
# Initialize plant population
initialize_population <- function() {
# Create wild population
wild_population <- data.table(
trait = rnorm(num_wild_population, mean = 0.7, sd = 0.3),  # Gaussian distribution
growth_rate = NA,
reproduction_rate = NA,
resistance = NA,
size = 1,
group = "Wild Population"
)
# Ensure trait value within [0, 1] for wild population
wild_population[trait < 0, trait := 0]
wild_population[trait > 1, trait := 1]
# Create domesticated population
domesticated_population <- data.table(
trait = rnorm(num_domesticated_population, mean = 0.5, sd = 0.02),  # Narrow Gaussian distribution
growth_rate = NA,
reproduction_rate = NA,
resistance = NA,
size = 1,
group = "Domesticated Population"
)
# Ensure trait value within [0, 1] for domesticated population
domesticated_population[trait < 0, trait := 0]
domesticated_population[trait > 1, trait := 1]
# Combine populations
population <- rbind(wild_population, domesticated_population)
# Initialize plant properties
population[, growth_rate := 1 - trait]
population[, reproduction_rate := 1 - trait]
population[, resistance := trait]
return(population)
}
# # Grow function
# grow <- function(population) {
#   population[, size := size + growth_rate * 0.1]
#   return(population)
# }
# Updated grow function based on trait and pest pressure
grow <- function(population, pest_pressure) {
population[, growth_rate := fifelse(trait >= 0.5 & pest_pressure >= 0.5, 0.05,
fifelse(trait < 0.5 & pest_pressure < 0.5, 0.05,
0.1))]
population[, size := size + growth_rate]
return(population)
}
# # mortality function
# suffer_mortality <- function(population, pest_pressure) {
#   mortality_prob <- pest_pressure * (1 - population$resistance) * 0.1
#   survivors <- population[runif(.N) >= mortality_prob]
#   return(survivors)
# }
# Updated mortality function based on trait and pest pressure
suffer_mortality <- function(population, pest_pressure) {
population[, mortality_prob := fifelse(trait >= 0.5 & pest_pressure >= 0.5, 0.01,
fifelse(trait < 0.5 & pest_pressure >= 0.5, 0.2,
fifelse(trait >= 0.5 & pest_pressure < 0.5, 0.01,
0.15)))]
survivors <- population[runif(.N) >= mortality_prob]
return(survivors)
}
# Reproduce function
reproduce <- function(population) {
# Calculate number of offspring for each individual plant
reproduction_prob <- population$reproduction_rate * 0.8
num_offspring <- floor(reproduction_prob) # Ensure integer
# Create new plants based on reproduction probability
new_plants <- population[rep(1:.N, num_offspring)]
if (nrow(new_plants) > 0) {
new_plants[, size := 1]
new_plants[, growth_rate := 1 - trait]
new_plants[, reproduction_rate := 1 - trait]
new_plants[, resistance := trait]
population <- rbind(population, new_plants)
}
return(population)
}
plot_population <- function(population, time_step, results) {
wild_population_count <- nrow(population[group == "Wild Population"])
domesticated_population_count <- nrow(population[group == "Domesticated Population"])
wild_avg_trait <- mean(population[group == "Wild Population", trait])
domesticated_avg_trait <- mean(population[group == "Domesticated Population", trait])
wild_trait_variance <- var(population[group == "Wild Population", trait])
domesticated_trait_variance <- var(population[group == "Domesticated Population", trait])
# Calculate bounds for variance
wild_upper_bound <- wild_avg_trait + sqrt(wild_trait_variance)
wild_lower_bound <- wild_avg_trait - sqrt(wild_trait_variance)
domesticated_upper_bound <- domesticated_avg_trait + sqrt(domesticated_trait_variance)
domesticated_lower_bound <- domesticated_avg_trait - sqrt(domesticated_trait_variance)
# Append results to the tracking data.table
results <- rbind(results, data.table(
time = time_step,
group = "Wild Population",
count = wild_population_count,
avg_trait = wild_avg_trait,
trait_variance = wild_trait_variance,
upper_bound = wild_upper_bound,
lower_bound = wild_lower_bound
))
results <- rbind(results, data.table(
time = time_step,
group = "Domesticated Population",
count = domesticated_population_count,
avg_trait = domesticated_avg_trait,
trait_variance = domesticated_trait_variance,
upper_bound = domesticated_upper_bound,
lower_bound = domesticated_lower_bound
))
return(results)
}
# simulate <- function(time_steps, pest_pressure) {
#   population <- initialize_population()
#   results <- data.table()
#   for (t in 1:time_steps) {
#     pest_pressure <- pest_pressure + sin(t/10) * 0.2  # Oscillates around base value
#     pest_pressure <- min(max(pest_pressure, 0), 1)  # Clamp between 0 and 1
#     population <- grow(population, pest_pressure)
#     population <- reproduce(population)
#     population <- suffer_mortality(population, pest_pressure)
#     results <- plot_population(population, t, results)
#   }
#   # [ ... plotting code unchanged ... ]
# }
simulate <- function(time_steps, pest_pressure) {
population <- initialize_population()
results <- data.table(
time = integer(),
group = character(),
count = integer(),
avg_trait = numeric(),
trait_variance = numeric(),
upper_bound = numeric(),
lower_bound = numeric()
)
for (t in 1:time_steps) {
pest_pressure <- pest_pressure + sin(t/10) * 0.2  # Oscillates around base value
pest_pressure <- min(max(pest_pressure, 0), 1)  # Clamp between 0 and 1
population <- grow(population, pest_pressure)
population <- reproduce(population)
population <- suffer_mortality(population, pest_pressure)
results <- plot_population(population, t, results)
}
ggplot(results, aes(x = time)) +
# Population size
geom_line(aes(y = count, color = group), linewidth = 1) +
# Average trait (scaled to align with population size)
geom_line(aes(y = avg_trait * max(results$count) / max(results$avg_trait),
color = group, linetype = group)) +
# Bounding region for variance (scaled to align with population size)
geom_ribbon(aes(ymin = lower_bound * max(results$count) / max(results$avg_trait),
ymax = upper_bound * max(results$count) / max(results$avg_trait),
fill = group), alpha = 0.1) +
scale_y_continuous(
name = "Population Size",
sec.axis = sec_axis(~ . * max(results$avg_trait) / max(results$count),
name = "Secondary Metabolite Expression (0-1)")
) +
scale_color_manual(
values = c("Wild Population" = "#27582b", "Domesticated Population" = "#59466a")  # Green and Purple
) +
scale_fill_manual(
values = c("Wild Population" = "#27582b", "Domesticated Population" = "#59466a")  # Green and Purple
) +
scale_linetype_manual(
values = c("Wild Population" = "dashed", "Domesticated Population" = "dashed")
) +
guides(
color = guide_legend(order = 1, title = "Population Size"),
fill = guide_legend(order = 2, title = "Trait Expression"),
linetype = guide_legend(order = 2, title = "Trait Expression")
) +
labs(
title = sprintf("Time Steps: %d, Pest Pressure: %.2f", time_steps, pest_pressure),
x = "Time Steps",
color = "Group",
fill = "Group",
linetype = "Group"
) +
theme_minimal()
}
# TODO add evoltution
# reproduce <- function(population) {
#   reproduction_prob <- population$reproduction_rate * 0.05
#   num_offspring <- floor(reproduction_prob)
#   new_plants <- population[rep(1:.N, num_offspring)]
#
#   if (nrow(new_plants) > 0) {
#     new_plants[, trait := pmin(pmax(trait + rnorm(.N, 0, 0.01), 0), 1)]  # Mutation
#     new_plants[, size := 1]
#     new_plants[, growth_rate := 1 - trait]
#     new_plants[, reproduction_rate := 1 - trait]
#     new_plants[, resistance := trait]
#     population <- rbind(population, new_plants)
#   }
#
#   return(population)
# }
# Run simulation for single instance to test
result_plot <- simulate(time_steps = 100, pest_pressure = 0.8)
result_plot
ggsave("simulation_plot.png", plot = result_plot, width = 10, height = 6)
?rnorm
getwd()
# import txt file first row as header, tab separated
climate_data <- read.table(
"sunflo french repo/sunflo/data/AUZ_2014.txt",
header = TRUE,
sep = "\t",
stringsAsFactors = FALSE
)
View(climate_data)
