) +
scale_linetype_manual(
values = c("Wild Population" = "dashed", "Domesticated Population" = "dashed")
) +
guides(
color = guide_legend(order = 1, title = "Population Size"),
fill = guide_legend(order = 2, title = "Trait Expression"),
linetype = guide_legend(order = 2, title = "Trait Expression")
) +
labs(
title = sprintf("Time Steps: %d, Pest Pressure: %.2f", time_steps, pest_pressure),
x = "Time Steps",
color = "Group",
fill = "Group",
linetype = "Group"
) +
theme_minimal()
}
# TODO add evoltution
# reproduce <- function(population) {
#   reproduction_prob <- population$reproduction_rate * 0.05
#   num_offspring <- floor(reproduction_prob)
#   new_plants <- population[rep(1:.N, num_offspring)]
#
#   if (nrow(new_plants) > 0) {
#     new_plants[, trait := pmin(pmax(trait + rnorm(.N, 0, 0.01), 0), 1)]  # Mutation
#     new_plants[, size := 1]
#     new_plants[, growth_rate := 1 - trait]
#     new_plants[, reproduction_rate := 1 - trait]
#     new_plants[, resistance := trait]
#     population <- rbind(population, new_plants)
#   }
#
#   return(population)
# }
# Run simulation for single instance to test
result_plot <- simulate(time_steps = 100, pest_pressure = 0.8)
result_plot
ggsave("simulation_plot.png", plot = result_plot, width = 10, height = 6)
?rnorm
getwd()
# import txt file first row as header, tab separated
climate_data <- read.table(
"sunflo french repo/sunflo/data/AUZ_2014.txt",
header = TRUE,
sep = "\t",
stringsAsFactors = FALSE
)
View(climate_data)
secondary_metabolite_wild = rnorm(initial_wild, mean = 0.7, sd = 0.3),  # Gaussian distribution
# Load libraries
library(data.table) # data manipulation
library(ggplot2) # plotting
library(parallel)  # parallelization
# Set seed for reproducibility
set.seed(123)
# Simulation parameters
years <- 20 # Number of years to simulate
# Initial populations sizes
initial_wild <- 100
initial_domesticated <- 100
# Environmental parameters ( TODO add real data)
temperature <- runif(years, 15, 35)         # degrees Celsius
precipitation <- runif(years, 200, 800)     # mm/year
# Pest pressure (0 to 1, where 0 is no pest pressure and 1 is high pest pressure)
# TODO pest pressure relates to climate (high temp, high pest pressure)
pest_pressure <- runif(years, 0.1, 1.0)     # 0 (none) to 1 (high)
secondary_metabolite_wild = rnorm(initial_wild, mean = 0.7, sd = 0.3)  # Gaussian distribution
secondary_metabolite_wild
range(secondary_metabolite_wild)
secondary_metabolite_wild[secondary_metabolite_wild > 1, secondary_metabolite_wild := 1]
# Ensure trait value within [0, 1] for wild population
secondary_metabolite_wild <- pmin(pmax(secondary_metabolite_wild, 0), 1)
range(secondary_metabolite_wild)
# secondary_metabolite_wild <- 0.9
secondary_metabolite_wild = rnorm(initial_wild, mean = 0.7, sd = 0.3)  # Gaussian distribution
# Ensure trait value within [0, 1] for wild population
secondary_metabolite_wild <- pmin(pmax(secondary_metabolite_wild, 0), 1)
# secondary_metabolite_domesticated <- 0.3
secondary_metabolite_domesticated = rnorm(initial_domesticated, mean = 0.3, sd = 0.02)  # Narrow Gaussian distribution
# Ensure trait value within [0, 1] for domesticated population
secondary_metabolite_domesticated <- pmin(pmax(secondary_metabolite_domesticated, 0), 1)
# Base rates
growth_base_wild <- 1.1
growth_base_domesticated <- 1.4
repro_base_wild <- 2
repro_base_domesticated <- 4
mortality_base <- 0.3
# Storage
pop_wild <- numeric(years)
pop_domesticated <- numeric(years)
pop_wild[1] <- initial_wild
pop_domesticated[1] <- initial_domesticated
# Helper functions
# Simulation parameters
years <- 20 # Number of years to simulate
# Initial populations sizes
initial_wild <- 100
initial_domesticated <- 100
# Environmental parameters ( TODO add real data)
temperature <- runif(years, 15, 35)         # degrees Celsius
precipitation <- runif(years, 200, 800)     # mm/year
# Pest pressure (0 to 1, where 0 is no pest pressure and 1 is high pest pressure)
# TODO pest pressure relate to climate (high temp --> high pest pressure)
pest_pressure <- runif(years, 0.1, 1.0)     # 0 (none) to 1 (high)
pest_pressure
# Trait parameters ------------------------------------------------------------
# TODO add real data on gene expression HERE
# secondary_metabolite_wild <- 0.9
secondary_metabolite_wild = rnorm(initial_wild, mean = 0.7, sd = 0.3)  # Gaussian distribution
# Ensure trait value within [0, 1] for wild population
secondary_metabolite_wild <- pmin(pmax(secondary_metabolite_wild, 0), 1)
# secondary_metabolite_domesticated <- 0.3
secondary_metabolite_domesticated = rnorm(initial_domesticated, mean = 0.3, sd = 0.02)  # Narrow Gaussian distribution
# Ensure trait value within [0, 1] for domesticated population
secondary_metabolite_domesticated <- pmin(pmax(secondary_metabolite_domesticated, 0), 1)
secondary_metabolite_domesticated
# Base rates
growth_base_wild <- 1.1
growth_base_domesticated <- 1.4
repro_base_wild <- 2
repro_base_domesticated <- 4
mortality_base <- 0.3
# Storage
pop_wild <- numeric(years)
pop_domesticated <- numeric(years)
pop_wild[1] <- initial_wild
pop_domesticated[1] <- initial_domesticated
mortality_function <- function(temp, precip, pest_pressure, secondary_metabolite, is_domesticated = FALSE) {
climate_stress <- (temp > 30) + (precip < 300)
herbivory <- pest_pressure * (if (is_domesticated) 1.2 else 0.8) * (1 - secondary_metabolite)
mortality_base + 0.1 * climate_stress + herbivory
}
reproduction_function <- function(base_repro, pest_pressure, secondary_metabolite) {
stress_factor <- 1 - pest_pressure * (1 - secondary_metabolite)
max(base_repro * stress_factor, 0)
}
selection_function <- function(pop, yield, is_domesticated = FALSE) {
if (is_domesticated) {
pop * (1 + 0.05 * yield)  # selection for high yield
} else {
pop * (1 + 0.02 * yield)  # weak natural selection on productivity
}
}
# patch of plants 7.0 plants per m^2 for a field plot of 5 acres
# 5 acres = 20234.3 m^2
plants_per_acre <- 7.0 * 20234.3  # plants per acre
# TODO think about the data structure for poolled trait of surviving wild populations
wild_trait_distibution_per_plot <- function(surviving_wild_populations, plants_per_acre) { # TODO add pest_pressure
rnorm((plants_per_acre - surviving_wild_populations), # TODO some measure of n surviving in plot
mean = mean(surviving_wild_populations),
sd = sd(surviving_wild_populations))
}
# base_growth is above ground biomass production
wild_growth_function <- function(base_growth, temp, precip, secondary_metabolite) {
climate_factor <- exp(-((temp - 25)^2)/50) * (precip / 400)
base_growth * climate_factor * (1 + 0.5 * secondary_metabolite)
}
wild_growth_function <- function(base_growth, temp, precip, secondary_metabolite) {
climate_stress <- (temp > 30) + (precip < 300)
growth_base <- base_growth * (1 - climate_stress * 0.1)
growth_base * (1 - secondary_metabolite)  # Higher secondary metabolite reduces growth
}
years=3
# Simulation loop
for (t in 2:years) {
# Wild
growth_wild <- growth_function(growth_base_wild, temperature[t], precipitation[t], secondary_metabolite_wild)
mortality_wild <- mortality_function(temperature[t], precipitation[t], pest_pressure[t], secondary_metabolite_wild)
survivors_wild <- pop_wild[t - 1] * (1 - mortality_wild)
offspring_wild <- survivors_wild * reproduction_function(repro_base_wild, pest_pressure[t], secondary_metabolite_wild)
selected_wild <- selection_function(offspring_wild, growth_wild, FALSE)
pop_wild[t] <- selected_wild
# Domesticated
growth_dom <- growth_function(growth_base_domesticated, temperature[t], precipitation[t], secondary_metabolite_domesticated)
mortality_dom <- mortality_function(temperature[t], precipitation[t], pest_pressure[t], secondary_metabolite_domesticated, TRUE)
survivors_dom <- pop_domesticated[t - 1] * (1 - mortality_dom)
offspring_dom <- survivors_dom * reproduction_function(repro_base_domesticated, pest_pressure[t], secondary_metabolite_domesticated)
selected_dom <- selection_function(offspring_dom, growth_dom, TRUE)
pop_domesticated[t] <- selected_dom
}
growth_function <- function(base_growth, temp, precip, secondary_metabolite) {
climate_factor <- exp(-((temp - 25)^2)/50) * (precip / 400)
base_growth * climate_factor * (1 + 0.5 * secondary_metabolite)
}
# Simulation loop
for (t in 2:years) {
# Wild
growth_wild <- growth_function(growth_base_wild, temperature[t], precipitation[t], secondary_metabolite_wild)
mortality_wild <- mortality_function(temperature[t], precipitation[t], pest_pressure[t], secondary_metabolite_wild)
survivors_wild <- pop_wild[t - 1] * (1 - mortality_wild)
offspring_wild <- survivors_wild * reproduction_function(repro_base_wild, pest_pressure[t], secondary_metabolite_wild)
selected_wild <- selection_function(offspring_wild, growth_wild, FALSE)
pop_wild[t] <- selected_wild
# Domesticated
growth_dom <- growth_function(growth_base_domesticated, temperature[t], precipitation[t], secondary_metabolite_domesticated)
mortality_dom <- mortality_function(temperature[t], precipitation[t], pest_pressure[t], secondary_metabolite_domesticated, TRUE)
survivors_dom <- pop_domesticated[t - 1] * (1 - mortality_dom)
offspring_dom <- survivors_dom * reproduction_function(repro_base_domesticated, pest_pressure[t], secondary_metabolite_domesticated)
selected_dom <- selection_function(offspring_dom, growth_dom, TRUE)
pop_domesticated[t] <- selected_dom
}
# Plot results
plot(1:years, pop_wild, type = "l", col = "forestgreen", ylim = range(c(pop_wild, pop_domesticated)),
ylab = "Population Size", xlab = "Year", lwd = 2, main = "Sunflower Population Dynamics")
pop_wild
pop_domesticated
initial_wild <- 100
initial_domesticated <- 100
# Environmental parameters ( TODO add real data)
temperature <- runif(years, 15, 35)         # degrees Celsius
precipitation <- runif(years, 200, 800)     # mm/year
# Pest pressure (0 to 1, where 0 is no pest pressure and 1 is high pest pressure)
# TODO pest pressure relate to climate (high temp --> high pest pressure)
pest_pressure <- runif(years, 0.1, 1.0)     # 0 (none) to 1 (high)
# Trait parameters ------------------------------------------------------------
# TODO add real data on gene expression HERE
# secondary_metabolite_wild <- 0.9
secondary_metabolite_wild = rnorm(initial_wild, mean = 0.7, sd = 0.3)  # Gaussian distribution
# Ensure trait value within [0, 1] for wild population
secondary_metabolite_wild <- pmin(pmax(secondary_metabolite_wild, 0), 1)
# secondary_metabolite_domesticated <- 0.3
secondary_metabolite_domesticated = rnorm(initial_domesticated, mean = 0.3, sd = 0.02)  # Narrow Gaussian distribution
# Ensure trait value within [0, 1] for domesticated population
secondary_metabolite_domesticated <- pmin(pmax(secondary_metabolite_domesticated, 0), 1)
# Base rates
growth_base_wild <- 1.1
growth_base_domesticated <- 1.4
repro_base_wild <- 2
repro_base_domesticated <- 4
mortality_base <- 0.3
# Storage
pop_wild <- numeric(years)
pop_domesticated <- numeric(years)
pop_wild[1] <- initial_wild
pop_domesticated[1] <- initial_domesticated
# Helper functions
mortality_function <- function(temp, precip, pest_pressure, secondary_metabolite, is_domesticated = FALSE) {
climate_stress <- (temp > 30) + (precip < 300)
herbivory <- pest_pressure * (if (is_domesticated) 1.2 else 0.8) * (1 - secondary_metabolite)
mortality_base + 0.1 * climate_stress + herbivory
}
reproduction_function <- function(base_repro, pest_pressure, secondary_metabolite) {
stress_factor <- 1 - pest_pressure * (1 - secondary_metabolite)
max(base_repro * stress_factor, 0)
}
selection_function <- function(pop, yield, is_domesticated = FALSE) {
if (is_domesticated) {
pop * (1 + 0.05 * yield)  # selection for high yield
} else {
pop * (1 + 0.02 * yield)  # weak natural selection on productivity
}
}
# patch of plants 7.0 plants per m^2 for a field plot of 5 acres
# 5 acres = 20234.3 m^2
plants_per_acre <- 7.0 * 20234.3  # plants per acre
# new_wild_population_size <- plants_per_acre - wild_survived
# TODO think about the data structure for poolled trait of surviving wild populations
wild_trait_distibution_per_plot <- function(surviving_wild_populations, plants_per_acre) { # TODO add pest_pressure
rnorm((plants_per_acre - surviving_wild_populations), # TODO some measure of n surviving in plot
mean = mean(surviving_wild_populations),
sd = sd(surviving_wild_populations))
}
growth_function <- function(base_growth, temp, precip, secondary_metabolite) {
climate_factor <- exp(-((temp - 25)^2)/50) * (precip / 400)
base_growth * climate_factor * (1 + 0.5 * secondary_metabolite)
}
wild_growth_function <- function(base_growth, temp, precip, secondary_metabolite) {
climate_stress <- (temp > 30) + (precip < 300)
growth_base <- base_growth * (1 - climate_stress * 0.1)
growth_base * (1 - secondary_metabolite)  # Higher secondary metabolite reduces growth
}
# Simulation loop
for (t in 2:years) {
# Wild
growth_wild <- growth_function(growth_base_wild, temperature[t], precipitation[t], secondary_metabolite_wild)
mortality_wild <- mortality_function(temperature[t], precipitation[t], pest_pressure[t], secondary_metabolite_wild)
survivors_wild <- pop_wild[t - 1] * (1 - mortality_wild)
offspring_wild <- survivors_wild * reproduction_function(repro_base_wild, pest_pressure[t], secondary_metabolite_wild)
selected_wild <- selection_function(offspring_wild, growth_wild, FALSE)
pop_wild[t] <- selected_wild
# Domesticated
growth_dom <- growth_function(growth_base_domesticated, temperature[t], precipitation[t], secondary_metabolite_domesticated)
mortality_dom <- mortality_function(temperature[t], precipitation[t], pest_pressure[t], secondary_metabolite_domesticated, TRUE)
survivors_dom <- pop_domesticated[t - 1] * (1 - mortality_dom)
offspring_dom <- survivors_dom * reproduction_function(repro_base_domesticated, pest_pressure[t], secondary_metabolite_domesticated)
selected_dom <- selection_function(offspring_dom, growth_dom, TRUE)
pop_domesticated[t] <- selected_dom
}
# Plot results
plot(1:years, pop_wild, type = "l", col = "forestgreen", ylim = range(c(pop_wild, pop_domesticated)),
ylab = "Population Size", xlab = "Year", lwd = 2, main = "Sunflower Population Dynamics")
lines(1:years, pop_domesticated, col = "goldenrod", lwd = 2)
legend("topright", legend = c("Wild", "Domesticated"), col = c("forestgreen", "goldenrod"), lty = 1, lwd = 2)
library(data.table) # data manipulation
library(ggplot2) # plotting
library(parallel)  # parallelization
# linear relationship between tempurture and yeild
# relationship between yield
# serve as a place holder until we have better data for the species
# Initialize parameters
num_wild_population <- 1000
num_domesticated_population <- 1000
time_steps <- 0
# Initialize plant population
initialize_population <- function() {
# Create wild population
wild_population <- data.table(
trait = rnorm(num_wild_population, mean = 0.7, sd = 0.3),  # Gaussian distribution
growth_rate = NA,
reproduction_rate = NA,
resistance = NA,
size = 1,
group = "Wild Population"
)
# Ensure trait value within [0, 1] for wild population
wild_population[trait < 0, trait := 0]
wild_population[trait > 1, trait := 1]
# Create domesticated population
domesticated_population <- data.table(
trait = rnorm(num_domesticated_population, mean = 0.5, sd = 0.02),  # Narrow Gaussian distribution
growth_rate = NA,
reproduction_rate = NA,
resistance = NA,
size = 1,
group = "Domesticated Population"
)
# Ensure trait value within [0, 1] for domesticated population
domesticated_population[trait < 0, trait := 0]
domesticated_population[trait > 1, trait := 1]
# Combine populations
population <- rbind(wild_population, domesticated_population)
# Initialize plant properties
population[, growth_rate := 1 - trait]
population[, reproduction_rate := 1 - trait]
population[, resistance := trait]
return(population)
}
# # Grow function
# grow <- function(population) {
#   population[, size := size + growth_rate * 0.1]
#   return(population)
# }
# Updated grow function based on trait and pest pressure
grow <- function(population, pest_pressure) {
population[, growth_rate := fifelse(trait >= 0.5 & pest_pressure >= 0.5, 0.05,
fifelse(trait < 0.5 & pest_pressure < 0.5, 0.05,
0.1))]
population[, size := size + growth_rate]
return(population)
}
# # mortality function
# suffer_mortality <- function(population, pest_pressure) {
#   mortality_prob <- pest_pressure * (1 - population$resistance) * 0.1
#   survivors <- population[runif(.N) >= mortality_prob]
#   return(survivors)
# }
# Updated mortality function based on trait and pest pressure
suffer_mortality <- function(population, pest_pressure) {
population[, mortality_prob := fifelse(trait >= 0.5 & pest_pressure >= 0.5, 0.01,
fifelse(trait < 0.5 & pest_pressure >= 0.5, 0.2,
fifelse(trait >= 0.5 & pest_pressure < 0.5, 0.01,
0.15)))]
survivors <- population[runif(.N) >= mortality_prob]
return(survivors)
}
# Reproduce function
reproduce <- function(population) {
# Calculate number of offspring for each individual plant
reproduction_prob <- population$reproduction_rate * 0.8
num_offspring <- floor(reproduction_prob) # Ensure integer
# Create new plants based on reproduction probability
new_plants <- population[rep(1:.N, num_offspring)]
if (nrow(new_plants) > 0) {
new_plants[, size := 1]
new_plants[, growth_rate := 1 - trait]
new_plants[, reproduction_rate := 1 - trait]
new_plants[, resistance := trait]
population <- rbind(population, new_plants)
}
return(population)
}
plot_population <- function(population, time_step, results) {
wild_population_count <- nrow(population[group == "Wild Population"])
domesticated_population_count <- nrow(population[group == "Domesticated Population"])
wild_avg_trait <- mean(population[group == "Wild Population", trait])
domesticated_avg_trait <- mean(population[group == "Domesticated Population", trait])
wild_trait_variance <- var(population[group == "Wild Population", trait])
domesticated_trait_variance <- var(population[group == "Domesticated Population", trait])
# Calculate bounds for variance
wild_upper_bound <- wild_avg_trait + sqrt(wild_trait_variance)
wild_lower_bound <- wild_avg_trait - sqrt(wild_trait_variance)
domesticated_upper_bound <- domesticated_avg_trait + sqrt(domesticated_trait_variance)
domesticated_lower_bound <- domesticated_avg_trait - sqrt(domesticated_trait_variance)
# Append results to the tracking data.table
results <- rbind(results, data.table(
time = time_step,
group = "Wild Population",
count = wild_population_count,
avg_trait = wild_avg_trait,
trait_variance = wild_trait_variance,
upper_bound = wild_upper_bound,
lower_bound = wild_lower_bound
))
results <- rbind(results, data.table(
time = time_step,
group = "Domesticated Population",
count = domesticated_population_count,
avg_trait = domesticated_avg_trait,
trait_variance = domesticated_trait_variance,
upper_bound = domesticated_upper_bound,
lower_bound = domesticated_lower_bound
))
return(results)
}
simulate <- function(time_steps, pest_pressure) {
population <- initialize_population()
results <- data.table(
time = integer(),
group = character(),
count = integer(),
avg_trait = numeric(),
trait_variance = numeric(),
upper_bound = numeric(),
lower_bound = numeric()
)
for (t in 1:time_steps) {
pest_pressure <- pest_pressure + sin(t/10) * 0.2  # Oscillates around base value
pest_pressure <- min(max(pest_pressure, 0), 1)  # Clamp between 0 and 1
population <- grow(population, pest_pressure)
population <- reproduce(population)
population <- suffer_mortality(population, pest_pressure)
results <- plot_population(population, t, results)
}
ggplot(results, aes(x = time)) +
# Population size
geom_line(aes(y = count, color = group), linewidth = 1) +
# Average trait (scaled to align with population size)
geom_line(aes(y = avg_trait * max(results$count) / max(results$avg_trait),
color = group, linetype = group)) +
# Bounding region for variance (scaled to align with population size)
geom_ribbon(aes(ymin = lower_bound * max(results$count) / max(results$avg_trait),
ymax = upper_bound * max(results$count) / max(results$avg_trait),
fill = group), alpha = 0.1) +
scale_y_continuous(
name = "Population Size",
sec.axis = sec_axis(~ . * max(results$avg_trait) / max(results$count),
name = "Secondary Metabolite Expression (0-1)")
) +
scale_color_manual(
values = c("Wild Population" = "#27582b", "Domesticated Population" = "#59466a")  # Green and Purple
) +
scale_fill_manual(
values = c("Wild Population" = "#27582b", "Domesticated Population" = "#59466a")  # Green and Purple
) +
scale_linetype_manual(
values = c("Wild Population" = "dashed", "Domesticated Population" = "dashed")
) +
guides(
color = guide_legend(order = 1, title = "Population Size"),
fill = guide_legend(order = 2, title = "Trait Expression"),
linetype = guide_legend(order = 2, title = "Trait Expression")
) +
labs(
title = sprintf("Time Steps: %d, Pest Pressure: %.2f", time_steps, pest_pressure),
x = "Time Steps",
color = "Group",
fill = "Group",
linetype = "Group"
) +
theme_minimal()
}
# Run simulation for single instance to test
result_plot <- simulate(time_steps = 100, pest_pressure = 0.8)
result_plot$data
result_plot
wild_growth_function <- function(base_growth, temp, precip, secondary_metabolite) {
climate_stress <- (temp > 30) + (precip < 300)
growth_base <- base_growth * (1 - climate_stress * 0.1)
growth_base * (1 - secondary_metabolite)  # Higher secondary metabolite reduces growth
}
# Simulation loop
for (t in 2:years) {
# Wild
# growth_wild <- growth_function(growth_base_wild, temperature[t], precipitation[t], secondary_metabolite_wild)
growth_wild <- wild_growth_function(growth_base_wild, temperature[t], precipitation[t], secondary_metabolite_wild)
mortality_wild <- mortality_function(temperature[t], precipitation[t], pest_pressure[t], secondary_metabolite_wild)
survivors_wild <- pop_wild[t - 1] * (1 - mortality_wild)
offspring_wild <- survivors_wild * reproduction_function(repro_base_wild, pest_pressure[t], secondary_metabolite_wild)
selected_wild <- selection_function(offspring_wild, growth_wild, FALSE)
pop_wild[t] <- selected_wild
# Domesticated
growth_dom <- growth_function(growth_base_domesticated, temperature[t], precipitation[t], secondary_metabolite_domesticated)
mortality_dom <- mortality_function(temperature[t], precipitation[t], pest_pressure[t], secondary_metabolite_domesticated, TRUE)
survivors_dom <- pop_domesticated[t - 1] * (1 - mortality_dom)
offspring_dom <- survivors_dom * reproduction_function(repro_base_domesticated, pest_pressure[t], secondary_metabolite_domesticated)
selected_dom <- selection_function(offspring_dom, growth_dom, TRUE)
pop_domesticated[t] <- selected_dom
}
# Plot results
plot(1:years, pop_wild, type = "l", col = "forestgreen", ylim = range(c(pop_wild, pop_domesticated)),
ylab = "Population Size", xlab = "Year", lwd = 2, main = "Sunflower Population Dynamics")
lines(1:years, pop_domesticated, col = "goldenrod", lwd = 2)
legend("topright", legend = c("Wild", "Domesticated"), col = c("forestgreen", "goldenrod"), lty = 1, lwd = 2)
# Plot results
plot(1:years, pop_wild, type = "l", col = "forestgreen", ylim = range(c(pop_wild, pop_domesticated)),
ylab = "Population Size", xlab = "Year", lwd = 2, main = "Sunflower Population Dynamics")
lines(1:years, pop_domesticated, col = "goldenrod", lwd = 2)
legend("topright", legend = c("Wild", "Domesticated"), col = c("forestgreen", "goldenrod"), lty = 1, lwd = 2)
wild_growth_function(growth_base_wild, temperature[t], precipitation[t], secondary_metabolite_wild)
plot(wild_growth_function(growth_base_wild, temperature[t], precipitation[t], secondary_metabolite_wild))
plot(growth_function(growth_base_wild, temperature[t], precipitation[t], secondary_metabolite_wild))
